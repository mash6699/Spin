package mx.spin.mobile.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mx.spin.mobile.dao.dealers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEALERS".
*/
public class dealersDao extends AbstractDao<dealers, Long> {

    public static final String TABLENAME = "DEALERS";

    /**
     * Properties of entity dealers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dealer_id = new Property(1, Integer.class, "dealer_id", false, "DEALER_ID");
        public final static Property Dealer = new Property(2, String.class, "dealer", false, "DEALER");
        public final static Property Dealer_address = new Property(3, String.class, "dealer_address", false, "DEALER_ADDRESS");
        public final static Property Dealer_zipcode = new Property(4, String.class, "dealer_zipcode", false, "DEALER_ZIPCODE");
        public final static Property Dealer_contact = new Property(5, String.class, "dealer_contact", false, "DEALER_CONTACT");
        public final static Property Dealer_email = new Property(6, String.class, "dealer_email", false, "DEALER_EMAIL");
        public final static Property Dealer_lat = new Property(7, String.class, "dealer_lat", false, "DEALER_LAT");
        public final static Property Dealer_lon = new Property(8, String.class, "dealer_lon", false, "DEALER_LON");
        public final static Property Dealer_phone = new Property(9, String.class, "dealer_phone", false, "DEALER_PHONE");
        public final static Property Dealer_mobile = new Property(10, String.class, "dealer_mobile", false, "DEALER_MOBILE");
        public final static Property Dealer_city = new Property(11, String.class, "dealer_city", false, "DEALER_CITY");
        public final static Property Dealer_sale = new Property(12, String.class, "dealer_sale", false, "DEALER_SALE");
        public final static Property Distance = new Property(13, String.class, "distance", false, "DISTANCE");
    };


    public dealersDao(DaoConfig config) {
        super(config);
    }
    
    public dealersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEALERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEALER_ID\" INTEGER," + // 1: dealer_id
                "\"DEALER\" TEXT," + // 2: dealer
                "\"DEALER_ADDRESS\" TEXT," + // 3: dealer_address
                "\"DEALER_ZIPCODE\" TEXT," + // 4: dealer_zipcode
                "\"DEALER_CONTACT\" TEXT," + // 5: dealer_contact
                "\"DEALER_EMAIL\" TEXT," + // 6: dealer_email
                "\"DEALER_LAT\" TEXT," + // 7: dealer_lat
                "\"DEALER_LON\" TEXT," + // 8: dealer_lon
                "\"DEALER_PHONE\" TEXT," + // 9: dealer_phone
                "\"DEALER_MOBILE\" TEXT," + // 10: dealer_mobile
                "\"DEALER_CITY\" TEXT," + // 11: dealer_city
                "\"DEALER_SALE\" TEXT," + // 12: dealer_sale
                "\"DISTANCE\" TEXT);"); // 13: distance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEALERS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, dealers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dealer_id = entity.getDealer_id();
        if (dealer_id != null) {
            stmt.bindLong(2, dealer_id);
        }
 
        String dealer = entity.getDealer();
        if (dealer != null) {
            stmt.bindString(3, dealer);
        }
 
        String dealer_address = entity.getDealer_address();
        if (dealer_address != null) {
            stmt.bindString(4, dealer_address);
        }
 
        String dealer_zipcode = entity.getDealer_zipcode();
        if (dealer_zipcode != null) {
            stmt.bindString(5, dealer_zipcode);
        }
 
        String dealer_contact = entity.getDealer_contact();
        if (dealer_contact != null) {
            stmt.bindString(6, dealer_contact);
        }
 
        String dealer_email = entity.getDealer_email();
        if (dealer_email != null) {
            stmt.bindString(7, dealer_email);
        }
 
        String dealer_lat = entity.getDealer_lat();
        if (dealer_lat != null) {
            stmt.bindString(8, dealer_lat);
        }
 
        String dealer_lon = entity.getDealer_lon();
        if (dealer_lon != null) {
            stmt.bindString(9, dealer_lon);
        }
 
        String dealer_phone = entity.getDealer_phone();
        if (dealer_phone != null) {
            stmt.bindString(10, dealer_phone);
        }
 
        String dealer_mobile = entity.getDealer_mobile();
        if (dealer_mobile != null) {
            stmt.bindString(11, dealer_mobile);
        }
 
        String dealer_city = entity.getDealer_city();
        if (dealer_city != null) {
            stmt.bindString(12, dealer_city);
        }
 
        String dealer_sale = entity.getDealer_sale();
        if (dealer_sale != null) {
            stmt.bindString(13, dealer_sale);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(14, distance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public dealers readEntity(Cursor cursor, int offset) {
        dealers entity = new dealers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dealer_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dealer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dealer_address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dealer_zipcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dealer_contact
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dealer_email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dealer_lat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dealer_lon
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dealer_phone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dealer_mobile
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dealer_city
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dealer_sale
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // distance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, dealers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDealer_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDealer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDealer_address(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDealer_zipcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDealer_contact(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDealer_email(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDealer_lat(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDealer_lon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDealer_phone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDealer_mobile(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDealer_city(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDealer_sale(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDistance(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(dealers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(dealers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
