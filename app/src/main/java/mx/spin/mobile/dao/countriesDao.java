package mx.spin.mobile.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import mx.spin.mobile.dao.countries;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUNTRIES".
*/
public class countriesDao extends AbstractDao<countries, Void> {

    public static final String TABLENAME = "COUNTRIES";

    /**
     * Properties of entity countries.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Country_id = new Property(0, String.class, "country_id", false, "COUNTRY_ID");
        public final static Property Country_code = new Property(1, String.class, "country_code", false, "COUNTRY_CODE");
        public final static Property Country = new Property(2, String.class, "country", false, "COUNTRY");
    };


    public countriesDao(DaoConfig config) {
        super(config);
    }
    
    public countriesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUNTRIES\" (" + //
                "\"COUNTRY_ID\" TEXT," + // 0: country_id
                "\"COUNTRY_CODE\" TEXT," + // 1: country_code
                "\"COUNTRY\" TEXT);"); // 2: country
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUNTRIES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, countries entity) {
        stmt.clearBindings();
 
        String country_id = entity.getCountry_id();
        if (country_id != null) {
            stmt.bindString(1, country_id);
        }
 
        String country_code = entity.getCountry_code();
        if (country_code != null) {
            stmt.bindString(2, country_code);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(3, country);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public countries readEntity(Cursor cursor, int offset) {
        countries entity = new countries( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // country_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // country_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // country
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, countries entity, int offset) {
        entity.setCountry_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCountry_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountry(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(countries entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(countries entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
