apply plugin: 'com.android.application'

android {

    File signFile = rootProject.file('sign/keystore.properties')
    Properties properties = new Properties()
    properties.load(new FileInputStream(signFile))

    signingConfigs {
        release {
            storeFile rootProject.file(properties['keystore'])
            storePassword properties['storePassword']
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
        }
        debugSigned {
            storeFile rootProject.file(properties['keystore'])
            storePassword properties['storePassword']
            keyAlias properties['keyAlias']
            keyPassword properties['keyPassword']
        }
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "mx.spin.mobile"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 19
        versionName "1.3"
        signingConfig signingConfigs.release
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }
        debug{
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            debuggable true
        }
    }

    productFlavors {
        rc {
            applicationId "mx.spin.mobile"
        }
    }
    applicationVariants.all { variant ->
        def nameFlavor = "";
        def versionApkName = variant.versionName.replace(".", "_");

        if (variant.name.toLowerCase().contains("release")) {

            if (variant.name.toLowerCase().contains("rc")) {
                nameFlavor = "RC"
            }

            def newApkName = "Spin_" + getDate() + "_" + nameFlavor + "_" + versionApkName + ".apk";
            variant.outputs.each { output ->
                output.outputFile = new File("${project.buildDir}/outputs/apk/", newApkName);
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.android.support:cardview-v7:23.2.1'
    compile 'com.android.support:support-v4:23.2.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'io.realm:realm-android:0.80.3'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile 'com.loopj.android:android-async-http:1.4.9'
    compile 'de.hdodenhof:circleimageview:2.0.0'
    compile 'com.facebook.android:facebook-android-sdk:4.+'
    compile "com.google.android.gms:play-services:8.4.0"
    compile "com.google.android.gms:play-services-gcm:8.4.0"
    compile 'com.google.android.gms:play-services-plus:8.4.0'
    compile 'com.google.android.gms:play-services-auth:8.4.0'
    compile 'com.google.android.gms:play-services-maps:8.4.0'
    compile 'com.google.android.gms:play-services-location:8.4.0'
    compile 'com.google.android.gms:play-services-appindexing:8.4.0'
    compile 'com.jakewharton:butterknife:7.0.1'
}


def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}